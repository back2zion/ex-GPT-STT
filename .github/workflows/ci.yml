name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  check-code-format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.11
        run: uv python install 3.11

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Check code format with Black
        run: |
          uv run black --check .

      - name: Check imports order with isort
        run: |
          uv run isort --check-only .

      - name: Check code style with Flake8
        if: always()
        run: |
          uv run flake8 .

      - name: Minimize uv cache
        run: uv cache prune --ci

  run-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run pytest
        run: |
          uv run pytest -v tests/

      - name: Test STT functionality
        run: |
          uv run python -c "from faster_whisper import WhisperModel; print('STT import successful')"

      - name: Minimize uv cache
        run: uv cache prune --ci

  docker-build:
    runs-on: ubuntu-latest
    needs: [check-code-format, run-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: ex-gpt-stt:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm ex-gpt-stt:test python3 -c "from faster_whisper import WhisperModel; print('Docker build successful')"

  build-package:
    runs-on: ubuntu-latest
    needs: [check-code-format, run-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.11
        run: uv python install 3.11

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Build package
        run: |
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Minimize uv cache
        run: uv cache prune --ci

  security-scan:
    runs-on: ubuntu-latest
    needs: [check-code-format]

    steps:
      - uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.11
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run safety check
        run: |
          uv run pip install safety
          uv export --format requirements-txt | uv run safety check --stdin

      - name: Run bandit security scan
        run: |
          uv run pip install bandit
          uv run bandit -r . -x tests/